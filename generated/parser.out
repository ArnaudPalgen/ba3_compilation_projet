Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> text
Rule 2     programme -> text programme
Rule 3     programme -> dumboBloc
Rule 4     programme -> dumboBloc programme
Rule 5     dumboBloc -> start_bloc expression_list end_bloc
Rule 6     dumboBloc -> start_bloc end_bloc
Rule 7     expression_list -> expression end_expression
Rule 8     expression_list -> expression end_expression expression_list
Rule 9     expression -> variable assignation string_expression
Rule 10    expression -> variable assignation string_list
Rule 11    expression -> variable assignation integer_expression
Rule 12    expression -> variable assignation variable
Rule 13    expression -> variable assignation boolean
Rule 14    expression -> if boolean_expression do expression_list endif
Rule 15    expression -> print string_expression
Rule 16    expression -> print variable
Rule 17    expression -> for variable in string_list do expression_list endfor
Rule 18    expression -> for variable in variable do expression_list endfor
Rule 19    string_expression -> string
Rule 20    string_expression -> string_expression POINT variable
Rule 21    string_expression -> variable POINT string_expression
Rule 22    string_expression -> variable POINT variable
Rule 23    string_expression -> string_expression POINT string_expression
Rule 24    string_list -> lparent string_list_interior rparent
Rule 25    string_list_interior -> string
Rule 26    string_list_interior -> string virgule string_list_interior
Rule 27    integer_expression -> integer_expression ADD_OP integer_expression
Rule 28    integer_expression -> integer_expression MUL_OP integer_expression
Rule 29    integer_expression -> variable MUL_OP integer_expression
Rule 30    integer_expression -> integer_expression MUL_OP variable
Rule 31    integer_expression -> variable MUL_OP variable
Rule 32    integer_expression -> variable ADD_OP integer_expression
Rule 33    integer_expression -> integer_expression ADD_OP variable
Rule 34    integer_expression -> variable ADD_OP variable
Rule 35    integer_expression -> integer
Rule 36    comparator_expression -> integer_expression COMPARATOR integer_expression
Rule 37    boolean_expression -> boolean_expression OP_LOGIQUE boolean_expression
Rule 38    boolean_expression -> comparator_expression
Rule 39    boolean_expression -> boolean
Rule 40    integer -> INTEGER
Rule 41    boolean -> BOOL
Rule 42    string -> STRING
Rule 43    if -> IF
Rule 44    endif -> ENDIF
Rule 45    variable -> VARIABLE
Rule 46    text -> TEXT
Rule 47    print -> PRINT
Rule 48    start_bloc -> START_BLOC
Rule 49    end_bloc -> END_BLOC
Rule 50    end_expression -> END_EXPRESSION
Rule 51    assignation -> ASSIGNATION
Rule 52    for -> FOR
Rule 53    in -> IN
Rule 54    do -> DO
Rule 55    endfor -> ENDFOR
Rule 56    lparent -> LPARENT
Rule 57    rparent -> RPARENT
Rule 58    virgule -> VIRGULE

Terminals, with rules where they appear

ADD_OP               : 27 32 33 34
ASSIGNATION          : 51
BOOL                 : 41
COMPARATOR           : 36
DO                   : 54
ENDFOR               : 55
ENDIF                : 44
END_BLOC             : 49
END_EXPRESSION       : 50
FOR                  : 52
IF                   : 43
IN                   : 53
INTEGER              : 40
LPARENT              : 56
MUL_OP               : 28 29 30 31
OP_LOGIQUE           : 37
POINT                : 20 21 22 23
PRINT                : 47
RPARENT              : 57
START_BLOC           : 48
STRING               : 42
TEXT                 : 46
VARIABLE             : 45
VIRGULE              : 58
error                : 

Nonterminals, with rules where they appear

assignation          : 9 10 11 12 13
boolean              : 13 39
boolean_expression   : 14 37 37
comparator_expression : 38
do                   : 14 17 18
dumboBloc            : 3 4
end_bloc             : 5 6
end_expression       : 7 8
endfor               : 17 18
endif                : 14
expression           : 7 8
expression_list      : 5 8 14 17 18
for                  : 17 18
if                   : 14
in                   : 17 18
integer              : 35
integer_expression   : 11 27 27 28 28 29 30 32 33 36 36
lparent              : 24
print                : 15 16
programme            : 2 4 0
rparent              : 24
start_bloc           : 5 6
string               : 19 25 26
string_expression    : 9 15 20 21 23 23
string_list          : 10 17
string_list_interior : 24 26
text                 : 1 2
variable             : 9 10 11 12 12 13 16 17 18 18 20 21 22 22 29 30 31 31 32 33 34 34
virgule              : 26

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . text
    (2) programme -> . text programme
    (3) programme -> . dumboBloc
    (4) programme -> . dumboBloc programme
    (46) text -> . TEXT
    (5) dumboBloc -> . start_bloc expression_list end_bloc
    (6) dumboBloc -> . start_bloc end_bloc
    (48) start_bloc -> . START_BLOC

    TEXT            shift and go to state 4
    START_BLOC      shift and go to state 6

    programme                      shift and go to state 1
    text                           shift and go to state 2
    dumboBloc                      shift and go to state 3
    start_bloc                     shift and go to state 5

state 1

    (0) S' -> programme .



state 2

    (1) programme -> text .
    (2) programme -> text . programme
    (1) programme -> . text
    (2) programme -> . text programme
    (3) programme -> . dumboBloc
    (4) programme -> . dumboBloc programme
    (46) text -> . TEXT
    (5) dumboBloc -> . start_bloc expression_list end_bloc
    (6) dumboBloc -> . start_bloc end_bloc
    (48) start_bloc -> . START_BLOC

    $end            reduce using rule 1 (programme -> text .)
    TEXT            shift and go to state 4
    START_BLOC      shift and go to state 6

    text                           shift and go to state 2
    programme                      shift and go to state 7
    dumboBloc                      shift and go to state 3
    start_bloc                     shift and go to state 5

state 3

    (3) programme -> dumboBloc .
    (4) programme -> dumboBloc . programme
    (1) programme -> . text
    (2) programme -> . text programme
    (3) programme -> . dumboBloc
    (4) programme -> . dumboBloc programme
    (46) text -> . TEXT
    (5) dumboBloc -> . start_bloc expression_list end_bloc
    (6) dumboBloc -> . start_bloc end_bloc
    (48) start_bloc -> . START_BLOC

    $end            reduce using rule 3 (programme -> dumboBloc .)
    TEXT            shift and go to state 4
    START_BLOC      shift and go to state 6

    dumboBloc                      shift and go to state 3
    programme                      shift and go to state 8
    text                           shift and go to state 2
    start_bloc                     shift and go to state 5

state 4

    (46) text -> TEXT .

    TEXT            reduce using rule 46 (text -> TEXT .)
    START_BLOC      reduce using rule 46 (text -> TEXT .)
    $end            reduce using rule 46 (text -> TEXT .)


state 5

    (5) dumboBloc -> start_bloc . expression_list end_bloc
    (6) dumboBloc -> start_bloc . end_bloc
    (7) expression_list -> . expression end_expression
    (8) expression_list -> . expression end_expression expression_list
    (49) end_bloc -> . END_BLOC
    (9) expression -> . variable assignation string_expression
    (10) expression -> . variable assignation string_list
    (11) expression -> . variable assignation integer_expression
    (12) expression -> . variable assignation variable
    (13) expression -> . variable assignation boolean
    (14) expression -> . if boolean_expression do expression_list endif
    (15) expression -> . print string_expression
    (16) expression -> . print variable
    (17) expression -> . for variable in string_list do expression_list endfor
    (18) expression -> . for variable in variable do expression_list endfor
    (45) variable -> . VARIABLE
    (43) if -> . IF
    (47) print -> . PRINT
    (52) for -> . FOR

    END_BLOC        shift and go to state 12
    VARIABLE        shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    FOR             shift and go to state 20

    expression_list                shift and go to state 9
    end_bloc                       shift and go to state 10
    expression                     shift and go to state 11
    variable                       shift and go to state 13
    if                             shift and go to state 14
    print                          shift and go to state 15
    for                            shift and go to state 16

state 6

    (48) start_bloc -> START_BLOC .

    END_BLOC        reduce using rule 48 (start_bloc -> START_BLOC .)
    VARIABLE        reduce using rule 48 (start_bloc -> START_BLOC .)
    IF              reduce using rule 48 (start_bloc -> START_BLOC .)
    PRINT           reduce using rule 48 (start_bloc -> START_BLOC .)
    FOR             reduce using rule 48 (start_bloc -> START_BLOC .)


state 7

    (2) programme -> text programme .

    $end            reduce using rule 2 (programme -> text programme .)


state 8

    (4) programme -> dumboBloc programme .

    $end            reduce using rule 4 (programme -> dumboBloc programme .)


state 9

    (5) dumboBloc -> start_bloc expression_list . end_bloc
    (49) end_bloc -> . END_BLOC

    END_BLOC        shift and go to state 12

    end_bloc                       shift and go to state 21

state 10

    (6) dumboBloc -> start_bloc end_bloc .

    TEXT            reduce using rule 6 (dumboBloc -> start_bloc end_bloc .)
    START_BLOC      reduce using rule 6 (dumboBloc -> start_bloc end_bloc .)
    $end            reduce using rule 6 (dumboBloc -> start_bloc end_bloc .)


state 11

    (7) expression_list -> expression . end_expression
    (8) expression_list -> expression . end_expression expression_list
    (50) end_expression -> . END_EXPRESSION

    END_EXPRESSION  shift and go to state 23

    end_expression                 shift and go to state 22

state 12

    (49) end_bloc -> END_BLOC .

    TEXT            reduce using rule 49 (end_bloc -> END_BLOC .)
    START_BLOC      reduce using rule 49 (end_bloc -> END_BLOC .)
    $end            reduce using rule 49 (end_bloc -> END_BLOC .)


state 13

    (9) expression -> variable . assignation string_expression
    (10) expression -> variable . assignation string_list
    (11) expression -> variable . assignation integer_expression
    (12) expression -> variable . assignation variable
    (13) expression -> variable . assignation boolean
    (51) assignation -> . ASSIGNATION

    ASSIGNATION     shift and go to state 25

    assignation                    shift and go to state 24

state 14

    (14) expression -> if . boolean_expression do expression_list endif
    (37) boolean_expression -> . boolean_expression OP_LOGIQUE boolean_expression
    (38) boolean_expression -> . comparator_expression
    (39) boolean_expression -> . boolean
    (36) comparator_expression -> . integer_expression COMPARATOR integer_expression
    (41) boolean -> . BOOL
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (40) integer -> . INTEGER

    BOOL            shift and go to state 30
    VARIABLE        shift and go to state 17
    INTEGER         shift and go to state 33

    boolean_expression             shift and go to state 26
    comparator_expression          shift and go to state 27
    boolean                        shift and go to state 28
    integer_expression             shift and go to state 29
    variable                       shift and go to state 31
    integer                        shift and go to state 32

state 15

    (15) expression -> print . string_expression
    (16) expression -> print . variable
    (19) string_expression -> . string
    (20) string_expression -> . string_expression POINT variable
    (21) string_expression -> . variable POINT string_expression
    (22) string_expression -> . variable POINT variable
    (23) string_expression -> . string_expression POINT string_expression
    (45) variable -> . VARIABLE
    (42) string -> . STRING

    VARIABLE        shift and go to state 17
    STRING          shift and go to state 37

    string_expression              shift and go to state 34
    variable                       shift and go to state 35
    string                         shift and go to state 36

state 16

    (17) expression -> for . variable in string_list do expression_list endfor
    (18) expression -> for . variable in variable do expression_list endfor
    (45) variable -> . VARIABLE

    VARIABLE        shift and go to state 17

    variable                       shift and go to state 38

state 17

    (45) variable -> VARIABLE .

    ASSIGNATION     reduce using rule 45 (variable -> VARIABLE .)
    MUL_OP          reduce using rule 45 (variable -> VARIABLE .)
    ADD_OP          reduce using rule 45 (variable -> VARIABLE .)
    POINT           reduce using rule 45 (variable -> VARIABLE .)
    END_EXPRESSION  reduce using rule 45 (variable -> VARIABLE .)
    IN              reduce using rule 45 (variable -> VARIABLE .)
    COMPARATOR      reduce using rule 45 (variable -> VARIABLE .)
    OP_LOGIQUE      reduce using rule 45 (variable -> VARIABLE .)
    DO              reduce using rule 45 (variable -> VARIABLE .)


state 18

    (43) if -> IF .

    BOOL            reduce using rule 43 (if -> IF .)
    VARIABLE        reduce using rule 43 (if -> IF .)
    INTEGER         reduce using rule 43 (if -> IF .)


state 19

    (47) print -> PRINT .

    VARIABLE        reduce using rule 47 (print -> PRINT .)
    STRING          reduce using rule 47 (print -> PRINT .)


state 20

    (52) for -> FOR .

    VARIABLE        reduce using rule 52 (for -> FOR .)


state 21

    (5) dumboBloc -> start_bloc expression_list end_bloc .

    TEXT            reduce using rule 5 (dumboBloc -> start_bloc expression_list end_bloc .)
    START_BLOC      reduce using rule 5 (dumboBloc -> start_bloc expression_list end_bloc .)
    $end            reduce using rule 5 (dumboBloc -> start_bloc expression_list end_bloc .)


state 22

    (7) expression_list -> expression end_expression .
    (8) expression_list -> expression end_expression . expression_list
    (7) expression_list -> . expression end_expression
    (8) expression_list -> . expression end_expression expression_list
    (9) expression -> . variable assignation string_expression
    (10) expression -> . variable assignation string_list
    (11) expression -> . variable assignation integer_expression
    (12) expression -> . variable assignation variable
    (13) expression -> . variable assignation boolean
    (14) expression -> . if boolean_expression do expression_list endif
    (15) expression -> . print string_expression
    (16) expression -> . print variable
    (17) expression -> . for variable in string_list do expression_list endfor
    (18) expression -> . for variable in variable do expression_list endfor
    (45) variable -> . VARIABLE
    (43) if -> . IF
    (47) print -> . PRINT
    (52) for -> . FOR

    END_BLOC        reduce using rule 7 (expression_list -> expression end_expression .)
    ENDIF           reduce using rule 7 (expression_list -> expression end_expression .)
    ENDFOR          reduce using rule 7 (expression_list -> expression end_expression .)
    VARIABLE        shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    FOR             shift and go to state 20

    expression                     shift and go to state 11
    expression_list                shift and go to state 39
    variable                       shift and go to state 13
    if                             shift and go to state 14
    print                          shift and go to state 15
    for                            shift and go to state 16

state 23

    (50) end_expression -> END_EXPRESSION .

    VARIABLE        reduce using rule 50 (end_expression -> END_EXPRESSION .)
    IF              reduce using rule 50 (end_expression -> END_EXPRESSION .)
    PRINT           reduce using rule 50 (end_expression -> END_EXPRESSION .)
    FOR             reduce using rule 50 (end_expression -> END_EXPRESSION .)
    END_BLOC        reduce using rule 50 (end_expression -> END_EXPRESSION .)
    ENDIF           reduce using rule 50 (end_expression -> END_EXPRESSION .)
    ENDFOR          reduce using rule 50 (end_expression -> END_EXPRESSION .)


state 24

    (9) expression -> variable assignation . string_expression
    (10) expression -> variable assignation . string_list
    (11) expression -> variable assignation . integer_expression
    (12) expression -> variable assignation . variable
    (13) expression -> variable assignation . boolean
    (19) string_expression -> . string
    (20) string_expression -> . string_expression POINT variable
    (21) string_expression -> . variable POINT string_expression
    (22) string_expression -> . variable POINT variable
    (23) string_expression -> . string_expression POINT string_expression
    (24) string_list -> . lparent string_list_interior rparent
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (41) boolean -> . BOOL
    (42) string -> . STRING
    (56) lparent -> . LPARENT
    (40) integer -> . INTEGER

    VARIABLE        shift and go to state 17
    BOOL            shift and go to state 30
    STRING          shift and go to state 37
    LPARENT         shift and go to state 46
    INTEGER         shift and go to state 33

    variable                       shift and go to state 40
    string_expression              shift and go to state 41
    string_list                    shift and go to state 42
    integer_expression             shift and go to state 43
    boolean                        shift and go to state 44
    string                         shift and go to state 36
    lparent                        shift and go to state 45
    integer                        shift and go to state 32

state 25

    (51) assignation -> ASSIGNATION .

    VARIABLE        reduce using rule 51 (assignation -> ASSIGNATION .)
    BOOL            reduce using rule 51 (assignation -> ASSIGNATION .)
    STRING          reduce using rule 51 (assignation -> ASSIGNATION .)
    LPARENT         reduce using rule 51 (assignation -> ASSIGNATION .)
    INTEGER         reduce using rule 51 (assignation -> ASSIGNATION .)


state 26

    (14) expression -> if boolean_expression . do expression_list endif
    (37) boolean_expression -> boolean_expression . OP_LOGIQUE boolean_expression
    (54) do -> . DO

    OP_LOGIQUE      shift and go to state 48
    DO              shift and go to state 49

    do                             shift and go to state 47

state 27

    (38) boolean_expression -> comparator_expression .

    OP_LOGIQUE      reduce using rule 38 (boolean_expression -> comparator_expression .)
    DO              reduce using rule 38 (boolean_expression -> comparator_expression .)


state 28

    (39) boolean_expression -> boolean .

    OP_LOGIQUE      reduce using rule 39 (boolean_expression -> boolean .)
    DO              reduce using rule 39 (boolean_expression -> boolean .)


state 29

    (36) comparator_expression -> integer_expression . COMPARATOR integer_expression
    (27) integer_expression -> integer_expression . ADD_OP integer_expression
    (28) integer_expression -> integer_expression . MUL_OP integer_expression
    (30) integer_expression -> integer_expression . MUL_OP variable
    (33) integer_expression -> integer_expression . ADD_OP variable

    COMPARATOR      shift and go to state 50
    ADD_OP          shift and go to state 51
    MUL_OP          shift and go to state 52


state 30

    (41) boolean -> BOOL .

    OP_LOGIQUE      reduce using rule 41 (boolean -> BOOL .)
    DO              reduce using rule 41 (boolean -> BOOL .)
    END_EXPRESSION  reduce using rule 41 (boolean -> BOOL .)


state 31

    (29) integer_expression -> variable . MUL_OP integer_expression
    (31) integer_expression -> variable . MUL_OP variable
    (32) integer_expression -> variable . ADD_OP integer_expression
    (34) integer_expression -> variable . ADD_OP variable

    MUL_OP          shift and go to state 53
    ADD_OP          shift and go to state 54


state 32

    (35) integer_expression -> integer .

    COMPARATOR      reduce using rule 35 (integer_expression -> integer .)
    ADD_OP          reduce using rule 35 (integer_expression -> integer .)
    MUL_OP          reduce using rule 35 (integer_expression -> integer .)
    END_EXPRESSION  reduce using rule 35 (integer_expression -> integer .)
    OP_LOGIQUE      reduce using rule 35 (integer_expression -> integer .)
    DO              reduce using rule 35 (integer_expression -> integer .)


state 33

    (40) integer -> INTEGER .

    COMPARATOR      reduce using rule 40 (integer -> INTEGER .)
    ADD_OP          reduce using rule 40 (integer -> INTEGER .)
    MUL_OP          reduce using rule 40 (integer -> INTEGER .)
    END_EXPRESSION  reduce using rule 40 (integer -> INTEGER .)
    OP_LOGIQUE      reduce using rule 40 (integer -> INTEGER .)
    DO              reduce using rule 40 (integer -> INTEGER .)


state 34

    (15) expression -> print string_expression .
    (20) string_expression -> string_expression . POINT variable
    (23) string_expression -> string_expression . POINT string_expression

    END_EXPRESSION  reduce using rule 15 (expression -> print string_expression .)
    POINT           shift and go to state 55


state 35

    (16) expression -> print variable .
    (21) string_expression -> variable . POINT string_expression
    (22) string_expression -> variable . POINT variable

    END_EXPRESSION  reduce using rule 16 (expression -> print variable .)
    POINT           shift and go to state 56


state 36

    (19) string_expression -> string .

    POINT           reduce using rule 19 (string_expression -> string .)
    END_EXPRESSION  reduce using rule 19 (string_expression -> string .)


state 37

    (42) string -> STRING .

    POINT           reduce using rule 42 (string -> STRING .)
    END_EXPRESSION  reduce using rule 42 (string -> STRING .)
    VIRGULE         reduce using rule 42 (string -> STRING .)
    RPARENT         reduce using rule 42 (string -> STRING .)


state 38

    (17) expression -> for variable . in string_list do expression_list endfor
    (18) expression -> for variable . in variable do expression_list endfor
    (53) in -> . IN

    IN              shift and go to state 58

    in                             shift and go to state 57

state 39

    (8) expression_list -> expression end_expression expression_list .

    END_BLOC        reduce using rule 8 (expression_list -> expression end_expression expression_list .)
    ENDIF           reduce using rule 8 (expression_list -> expression end_expression expression_list .)
    ENDFOR          reduce using rule 8 (expression_list -> expression end_expression expression_list .)


state 40

    (12) expression -> variable assignation variable .
    (21) string_expression -> variable . POINT string_expression
    (22) string_expression -> variable . POINT variable
    (29) integer_expression -> variable . MUL_OP integer_expression
    (31) integer_expression -> variable . MUL_OP variable
    (32) integer_expression -> variable . ADD_OP integer_expression
    (34) integer_expression -> variable . ADD_OP variable

    END_EXPRESSION  reduce using rule 12 (expression -> variable assignation variable .)
    POINT           shift and go to state 56
    MUL_OP          shift and go to state 53
    ADD_OP          shift and go to state 54


state 41

    (9) expression -> variable assignation string_expression .
    (20) string_expression -> string_expression . POINT variable
    (23) string_expression -> string_expression . POINT string_expression

    END_EXPRESSION  reduce using rule 9 (expression -> variable assignation string_expression .)
    POINT           shift and go to state 55


state 42

    (10) expression -> variable assignation string_list .

    END_EXPRESSION  reduce using rule 10 (expression -> variable assignation string_list .)


state 43

    (11) expression -> variable assignation integer_expression .
    (27) integer_expression -> integer_expression . ADD_OP integer_expression
    (28) integer_expression -> integer_expression . MUL_OP integer_expression
    (30) integer_expression -> integer_expression . MUL_OP variable
    (33) integer_expression -> integer_expression . ADD_OP variable

    END_EXPRESSION  reduce using rule 11 (expression -> variable assignation integer_expression .)
    ADD_OP          shift and go to state 51
    MUL_OP          shift and go to state 52


state 44

    (13) expression -> variable assignation boolean .

    END_EXPRESSION  reduce using rule 13 (expression -> variable assignation boolean .)


state 45

    (24) string_list -> lparent . string_list_interior rparent
    (25) string_list_interior -> . string
    (26) string_list_interior -> . string virgule string_list_interior
    (42) string -> . STRING

    STRING          shift and go to state 37

    string_list_interior           shift and go to state 59
    string                         shift and go to state 60

state 46

    (56) lparent -> LPARENT .

    STRING          reduce using rule 56 (lparent -> LPARENT .)


state 47

    (14) expression -> if boolean_expression do . expression_list endif
    (7) expression_list -> . expression end_expression
    (8) expression_list -> . expression end_expression expression_list
    (9) expression -> . variable assignation string_expression
    (10) expression -> . variable assignation string_list
    (11) expression -> . variable assignation integer_expression
    (12) expression -> . variable assignation variable
    (13) expression -> . variable assignation boolean
    (14) expression -> . if boolean_expression do expression_list endif
    (15) expression -> . print string_expression
    (16) expression -> . print variable
    (17) expression -> . for variable in string_list do expression_list endfor
    (18) expression -> . for variable in variable do expression_list endfor
    (45) variable -> . VARIABLE
    (43) if -> . IF
    (47) print -> . PRINT
    (52) for -> . FOR

    VARIABLE        shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    FOR             shift and go to state 20

    if                             shift and go to state 14
    expression_list                shift and go to state 61
    expression                     shift and go to state 11
    variable                       shift and go to state 13
    print                          shift and go to state 15
    for                            shift and go to state 16

state 48

    (37) boolean_expression -> boolean_expression OP_LOGIQUE . boolean_expression
    (37) boolean_expression -> . boolean_expression OP_LOGIQUE boolean_expression
    (38) boolean_expression -> . comparator_expression
    (39) boolean_expression -> . boolean
    (36) comparator_expression -> . integer_expression COMPARATOR integer_expression
    (41) boolean -> . BOOL
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (40) integer -> . INTEGER

    BOOL            shift and go to state 30
    VARIABLE        shift and go to state 17
    INTEGER         shift and go to state 33

    boolean_expression             shift and go to state 62
    comparator_expression          shift and go to state 27
    boolean                        shift and go to state 28
    integer_expression             shift and go to state 29
    variable                       shift and go to state 31
    integer                        shift and go to state 32

state 49

    (54) do -> DO .

    VARIABLE        reduce using rule 54 (do -> DO .)
    IF              reduce using rule 54 (do -> DO .)
    PRINT           reduce using rule 54 (do -> DO .)
    FOR             reduce using rule 54 (do -> DO .)


state 50

    (36) comparator_expression -> integer_expression COMPARATOR . integer_expression
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (40) integer -> . INTEGER

    VARIABLE        shift and go to state 17
    INTEGER         shift and go to state 33

    integer_expression             shift and go to state 63
    variable                       shift and go to state 31
    integer                        shift and go to state 32

state 51

    (27) integer_expression -> integer_expression ADD_OP . integer_expression
    (33) integer_expression -> integer_expression ADD_OP . variable
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (40) integer -> . INTEGER

    VARIABLE        shift and go to state 17
    INTEGER         shift and go to state 33

    integer_expression             shift and go to state 64
    variable                       shift and go to state 65
    integer                        shift and go to state 32

state 52

    (28) integer_expression -> integer_expression MUL_OP . integer_expression
    (30) integer_expression -> integer_expression MUL_OP . variable
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (40) integer -> . INTEGER

    VARIABLE        shift and go to state 17
    INTEGER         shift and go to state 33

    integer_expression             shift and go to state 66
    variable                       shift and go to state 67
    integer                        shift and go to state 32

state 53

    (29) integer_expression -> variable MUL_OP . integer_expression
    (31) integer_expression -> variable MUL_OP . variable
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (40) integer -> . INTEGER

    VARIABLE        shift and go to state 17
    INTEGER         shift and go to state 33

    variable                       shift and go to state 68
    integer_expression             shift and go to state 69
    integer                        shift and go to state 32

state 54

    (32) integer_expression -> variable ADD_OP . integer_expression
    (34) integer_expression -> variable ADD_OP . variable
    (27) integer_expression -> . integer_expression ADD_OP integer_expression
    (28) integer_expression -> . integer_expression MUL_OP integer_expression
    (29) integer_expression -> . variable MUL_OP integer_expression
    (30) integer_expression -> . integer_expression MUL_OP variable
    (31) integer_expression -> . variable MUL_OP variable
    (32) integer_expression -> . variable ADD_OP integer_expression
    (33) integer_expression -> . integer_expression ADD_OP variable
    (34) integer_expression -> . variable ADD_OP variable
    (35) integer_expression -> . integer
    (45) variable -> . VARIABLE
    (40) integer -> . INTEGER

    VARIABLE        shift and go to state 17
    INTEGER         shift and go to state 33

    variable                       shift and go to state 70
    integer_expression             shift and go to state 71
    integer                        shift and go to state 32

state 55

    (20) string_expression -> string_expression POINT . variable
    (23) string_expression -> string_expression POINT . string_expression
    (45) variable -> . VARIABLE
    (19) string_expression -> . string
    (20) string_expression -> . string_expression POINT variable
    (21) string_expression -> . variable POINT string_expression
    (22) string_expression -> . variable POINT variable
    (23) string_expression -> . string_expression POINT string_expression
    (42) string -> . STRING

    VARIABLE        shift and go to state 17
    STRING          shift and go to state 37

    string_expression              shift and go to state 72
    variable                       shift and go to state 73
    string                         shift and go to state 36

state 56

    (21) string_expression -> variable POINT . string_expression
    (22) string_expression -> variable POINT . variable
    (19) string_expression -> . string
    (20) string_expression -> . string_expression POINT variable
    (21) string_expression -> . variable POINT string_expression
    (22) string_expression -> . variable POINT variable
    (23) string_expression -> . string_expression POINT string_expression
    (45) variable -> . VARIABLE
    (42) string -> . STRING

    VARIABLE        shift and go to state 17
    STRING          shift and go to state 37

    variable                       shift and go to state 74
    string_expression              shift and go to state 75
    string                         shift and go to state 36

state 57

    (17) expression -> for variable in . string_list do expression_list endfor
    (18) expression -> for variable in . variable do expression_list endfor
    (24) string_list -> . lparent string_list_interior rparent
    (45) variable -> . VARIABLE
    (56) lparent -> . LPARENT

    VARIABLE        shift and go to state 17
    LPARENT         shift and go to state 46

    variable                       shift and go to state 76
    string_list                    shift and go to state 77
    lparent                        shift and go to state 45

state 58

    (53) in -> IN .

    VARIABLE        reduce using rule 53 (in -> IN .)
    LPARENT         reduce using rule 53 (in -> IN .)


state 59

    (24) string_list -> lparent string_list_interior . rparent
    (57) rparent -> . RPARENT

    RPARENT         shift and go to state 79

    rparent                        shift and go to state 78

state 60

    (25) string_list_interior -> string .
    (26) string_list_interior -> string . virgule string_list_interior
    (58) virgule -> . VIRGULE

    RPARENT         reduce using rule 25 (string_list_interior -> string .)
    VIRGULE         shift and go to state 81

    virgule                        shift and go to state 80

state 61

    (14) expression -> if boolean_expression do expression_list . endif
    (44) endif -> . ENDIF

    ENDIF           shift and go to state 83

    endif                          shift and go to state 82

state 62

    (37) boolean_expression -> boolean_expression OP_LOGIQUE boolean_expression .
    (37) boolean_expression -> boolean_expression . OP_LOGIQUE boolean_expression

    OP_LOGIQUE      reduce using rule 37 (boolean_expression -> boolean_expression OP_LOGIQUE boolean_expression .)
    DO              reduce using rule 37 (boolean_expression -> boolean_expression OP_LOGIQUE boolean_expression .)

  ! OP_LOGIQUE      [ shift and go to state 48 ]


state 63

    (36) comparator_expression -> integer_expression COMPARATOR integer_expression .
    (27) integer_expression -> integer_expression . ADD_OP integer_expression
    (28) integer_expression -> integer_expression . MUL_OP integer_expression
    (30) integer_expression -> integer_expression . MUL_OP variable
    (33) integer_expression -> integer_expression . ADD_OP variable

    OP_LOGIQUE      reduce using rule 36 (comparator_expression -> integer_expression COMPARATOR integer_expression .)
    DO              reduce using rule 36 (comparator_expression -> integer_expression COMPARATOR integer_expression .)
    ADD_OP          shift and go to state 51
    MUL_OP          shift and go to state 52


state 64

    (27) integer_expression -> integer_expression ADD_OP integer_expression .
    (27) integer_expression -> integer_expression . ADD_OP integer_expression
    (28) integer_expression -> integer_expression . MUL_OP integer_expression
    (30) integer_expression -> integer_expression . MUL_OP variable
    (33) integer_expression -> integer_expression . ADD_OP variable

    COMPARATOR      reduce using rule 27 (integer_expression -> integer_expression ADD_OP integer_expression .)
    ADD_OP          reduce using rule 27 (integer_expression -> integer_expression ADD_OP integer_expression .)
    END_EXPRESSION  reduce using rule 27 (integer_expression -> integer_expression ADD_OP integer_expression .)
    OP_LOGIQUE      reduce using rule 27 (integer_expression -> integer_expression ADD_OP integer_expression .)
    DO              reduce using rule 27 (integer_expression -> integer_expression ADD_OP integer_expression .)
    MUL_OP          shift and go to state 52

  ! MUL_OP          [ reduce using rule 27 (integer_expression -> integer_expression ADD_OP integer_expression .) ]
  ! ADD_OP          [ shift and go to state 51 ]


state 65

    (33) integer_expression -> integer_expression ADD_OP variable .
    (29) integer_expression -> variable . MUL_OP integer_expression
    (31) integer_expression -> variable . MUL_OP variable
    (32) integer_expression -> variable . ADD_OP integer_expression
    (34) integer_expression -> variable . ADD_OP variable

    COMPARATOR      reduce using rule 33 (integer_expression -> integer_expression ADD_OP variable .)
    ADD_OP          reduce using rule 33 (integer_expression -> integer_expression ADD_OP variable .)
    END_EXPRESSION  reduce using rule 33 (integer_expression -> integer_expression ADD_OP variable .)
    OP_LOGIQUE      reduce using rule 33 (integer_expression -> integer_expression ADD_OP variable .)
    DO              reduce using rule 33 (integer_expression -> integer_expression ADD_OP variable .)
    MUL_OP          shift and go to state 53

  ! MUL_OP          [ reduce using rule 33 (integer_expression -> integer_expression ADD_OP variable .) ]
  ! ADD_OP          [ shift and go to state 54 ]


state 66

    (28) integer_expression -> integer_expression MUL_OP integer_expression .
    (27) integer_expression -> integer_expression . ADD_OP integer_expression
    (28) integer_expression -> integer_expression . MUL_OP integer_expression
    (30) integer_expression -> integer_expression . MUL_OP variable
    (33) integer_expression -> integer_expression . ADD_OP variable

    COMPARATOR      reduce using rule 28 (integer_expression -> integer_expression MUL_OP integer_expression .)
    ADD_OP          reduce using rule 28 (integer_expression -> integer_expression MUL_OP integer_expression .)
    MUL_OP          reduce using rule 28 (integer_expression -> integer_expression MUL_OP integer_expression .)
    END_EXPRESSION  reduce using rule 28 (integer_expression -> integer_expression MUL_OP integer_expression .)
    OP_LOGIQUE      reduce using rule 28 (integer_expression -> integer_expression MUL_OP integer_expression .)
    DO              reduce using rule 28 (integer_expression -> integer_expression MUL_OP integer_expression .)

  ! ADD_OP          [ shift and go to state 51 ]
  ! MUL_OP          [ shift and go to state 52 ]


state 67

    (30) integer_expression -> integer_expression MUL_OP variable .
    (29) integer_expression -> variable . MUL_OP integer_expression
    (31) integer_expression -> variable . MUL_OP variable
    (32) integer_expression -> variable . ADD_OP integer_expression
    (34) integer_expression -> variable . ADD_OP variable

    COMPARATOR      reduce using rule 30 (integer_expression -> integer_expression MUL_OP variable .)
    ADD_OP          reduce using rule 30 (integer_expression -> integer_expression MUL_OP variable .)
    MUL_OP          reduce using rule 30 (integer_expression -> integer_expression MUL_OP variable .)
    END_EXPRESSION  reduce using rule 30 (integer_expression -> integer_expression MUL_OP variable .)
    OP_LOGIQUE      reduce using rule 30 (integer_expression -> integer_expression MUL_OP variable .)
    DO              reduce using rule 30 (integer_expression -> integer_expression MUL_OP variable .)

  ! MUL_OP          [ shift and go to state 53 ]
  ! ADD_OP          [ shift and go to state 54 ]


state 68

    (31) integer_expression -> variable MUL_OP variable .
    (29) integer_expression -> variable . MUL_OP integer_expression
    (31) integer_expression -> variable . MUL_OP variable
    (32) integer_expression -> variable . ADD_OP integer_expression
    (34) integer_expression -> variable . ADD_OP variable

    COMPARATOR      reduce using rule 31 (integer_expression -> variable MUL_OP variable .)
    ADD_OP          reduce using rule 31 (integer_expression -> variable MUL_OP variable .)
    MUL_OP          reduce using rule 31 (integer_expression -> variable MUL_OP variable .)
    END_EXPRESSION  reduce using rule 31 (integer_expression -> variable MUL_OP variable .)
    OP_LOGIQUE      reduce using rule 31 (integer_expression -> variable MUL_OP variable .)
    DO              reduce using rule 31 (integer_expression -> variable MUL_OP variable .)

  ! MUL_OP          [ shift and go to state 53 ]
  ! ADD_OP          [ shift and go to state 54 ]


state 69

    (29) integer_expression -> variable MUL_OP integer_expression .
    (27) integer_expression -> integer_expression . ADD_OP integer_expression
    (28) integer_expression -> integer_expression . MUL_OP integer_expression
    (30) integer_expression -> integer_expression . MUL_OP variable
    (33) integer_expression -> integer_expression . ADD_OP variable

    COMPARATOR      reduce using rule 29 (integer_expression -> variable MUL_OP integer_expression .)
    ADD_OP          reduce using rule 29 (integer_expression -> variable MUL_OP integer_expression .)
    MUL_OP          reduce using rule 29 (integer_expression -> variable MUL_OP integer_expression .)
    END_EXPRESSION  reduce using rule 29 (integer_expression -> variable MUL_OP integer_expression .)
    OP_LOGIQUE      reduce using rule 29 (integer_expression -> variable MUL_OP integer_expression .)
    DO              reduce using rule 29 (integer_expression -> variable MUL_OP integer_expression .)

  ! ADD_OP          [ shift and go to state 51 ]
  ! MUL_OP          [ shift and go to state 52 ]


state 70

    (34) integer_expression -> variable ADD_OP variable .
    (29) integer_expression -> variable . MUL_OP integer_expression
    (31) integer_expression -> variable . MUL_OP variable
    (32) integer_expression -> variable . ADD_OP integer_expression
    (34) integer_expression -> variable . ADD_OP variable

    COMPARATOR      reduce using rule 34 (integer_expression -> variable ADD_OP variable .)
    ADD_OP          reduce using rule 34 (integer_expression -> variable ADD_OP variable .)
    END_EXPRESSION  reduce using rule 34 (integer_expression -> variable ADD_OP variable .)
    OP_LOGIQUE      reduce using rule 34 (integer_expression -> variable ADD_OP variable .)
    DO              reduce using rule 34 (integer_expression -> variable ADD_OP variable .)
    MUL_OP          shift and go to state 53

  ! MUL_OP          [ reduce using rule 34 (integer_expression -> variable ADD_OP variable .) ]
  ! ADD_OP          [ shift and go to state 54 ]


state 71

    (32) integer_expression -> variable ADD_OP integer_expression .
    (27) integer_expression -> integer_expression . ADD_OP integer_expression
    (28) integer_expression -> integer_expression . MUL_OP integer_expression
    (30) integer_expression -> integer_expression . MUL_OP variable
    (33) integer_expression -> integer_expression . ADD_OP variable

    COMPARATOR      reduce using rule 32 (integer_expression -> variable ADD_OP integer_expression .)
    ADD_OP          reduce using rule 32 (integer_expression -> variable ADD_OP integer_expression .)
    END_EXPRESSION  reduce using rule 32 (integer_expression -> variable ADD_OP integer_expression .)
    OP_LOGIQUE      reduce using rule 32 (integer_expression -> variable ADD_OP integer_expression .)
    DO              reduce using rule 32 (integer_expression -> variable ADD_OP integer_expression .)
    MUL_OP          shift and go to state 52

  ! MUL_OP          [ reduce using rule 32 (integer_expression -> variable ADD_OP integer_expression .) ]
  ! ADD_OP          [ shift and go to state 51 ]


state 72

    (23) string_expression -> string_expression POINT string_expression .
    (20) string_expression -> string_expression . POINT variable
    (23) string_expression -> string_expression . POINT string_expression

    POINT           reduce using rule 23 (string_expression -> string_expression POINT string_expression .)
    END_EXPRESSION  reduce using rule 23 (string_expression -> string_expression POINT string_expression .)

  ! POINT           [ shift and go to state 55 ]


state 73

    (20) string_expression -> string_expression POINT variable .
    (21) string_expression -> variable . POINT string_expression
    (22) string_expression -> variable . POINT variable

    POINT           reduce using rule 20 (string_expression -> string_expression POINT variable .)
    END_EXPRESSION  reduce using rule 20 (string_expression -> string_expression POINT variable .)

  ! POINT           [ shift and go to state 56 ]


state 74

    (22) string_expression -> variable POINT variable .
    (21) string_expression -> variable . POINT string_expression
    (22) string_expression -> variable . POINT variable

    POINT           reduce using rule 22 (string_expression -> variable POINT variable .)
    END_EXPRESSION  reduce using rule 22 (string_expression -> variable POINT variable .)

  ! POINT           [ shift and go to state 56 ]


state 75

    (21) string_expression -> variable POINT string_expression .
    (20) string_expression -> string_expression . POINT variable
    (23) string_expression -> string_expression . POINT string_expression

    POINT           reduce using rule 21 (string_expression -> variable POINT string_expression .)
    END_EXPRESSION  reduce using rule 21 (string_expression -> variable POINT string_expression .)

  ! POINT           [ shift and go to state 55 ]


state 76

    (18) expression -> for variable in variable . do expression_list endfor
    (54) do -> . DO

    DO              shift and go to state 49

    do                             shift and go to state 84

state 77

    (17) expression -> for variable in string_list . do expression_list endfor
    (54) do -> . DO

    DO              shift and go to state 49

    do                             shift and go to state 85

state 78

    (24) string_list -> lparent string_list_interior rparent .

    END_EXPRESSION  reduce using rule 24 (string_list -> lparent string_list_interior rparent .)
    DO              reduce using rule 24 (string_list -> lparent string_list_interior rparent .)


state 79

    (57) rparent -> RPARENT .

    END_EXPRESSION  reduce using rule 57 (rparent -> RPARENT .)
    DO              reduce using rule 57 (rparent -> RPARENT .)


state 80

    (26) string_list_interior -> string virgule . string_list_interior
    (25) string_list_interior -> . string
    (26) string_list_interior -> . string virgule string_list_interior
    (42) string -> . STRING

    STRING          shift and go to state 37

    string                         shift and go to state 60
    string_list_interior           shift and go to state 86

state 81

    (58) virgule -> VIRGULE .

    STRING          reduce using rule 58 (virgule -> VIRGULE .)


state 82

    (14) expression -> if boolean_expression do expression_list endif .

    END_EXPRESSION  reduce using rule 14 (expression -> if boolean_expression do expression_list endif .)


state 83

    (44) endif -> ENDIF .

    END_EXPRESSION  reduce using rule 44 (endif -> ENDIF .)


state 84

    (18) expression -> for variable in variable do . expression_list endfor
    (7) expression_list -> . expression end_expression
    (8) expression_list -> . expression end_expression expression_list
    (9) expression -> . variable assignation string_expression
    (10) expression -> . variable assignation string_list
    (11) expression -> . variable assignation integer_expression
    (12) expression -> . variable assignation variable
    (13) expression -> . variable assignation boolean
    (14) expression -> . if boolean_expression do expression_list endif
    (15) expression -> . print string_expression
    (16) expression -> . print variable
    (17) expression -> . for variable in string_list do expression_list endfor
    (18) expression -> . for variable in variable do expression_list endfor
    (45) variable -> . VARIABLE
    (43) if -> . IF
    (47) print -> . PRINT
    (52) for -> . FOR

    VARIABLE        shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    FOR             shift and go to state 20

    for                            shift and go to state 16
    variable                       shift and go to state 13
    expression_list                shift and go to state 87
    expression                     shift and go to state 11
    if                             shift and go to state 14
    print                          shift and go to state 15

state 85

    (17) expression -> for variable in string_list do . expression_list endfor
    (7) expression_list -> . expression end_expression
    (8) expression_list -> . expression end_expression expression_list
    (9) expression -> . variable assignation string_expression
    (10) expression -> . variable assignation string_list
    (11) expression -> . variable assignation integer_expression
    (12) expression -> . variable assignation variable
    (13) expression -> . variable assignation boolean
    (14) expression -> . if boolean_expression do expression_list endif
    (15) expression -> . print string_expression
    (16) expression -> . print variable
    (17) expression -> . for variable in string_list do expression_list endfor
    (18) expression -> . for variable in variable do expression_list endfor
    (45) variable -> . VARIABLE
    (43) if -> . IF
    (47) print -> . PRINT
    (52) for -> . FOR

    VARIABLE        shift and go to state 17
    IF              shift and go to state 18
    PRINT           shift and go to state 19
    FOR             shift and go to state 20

    for                            shift and go to state 16
    variable                       shift and go to state 13
    expression_list                shift and go to state 88
    expression                     shift and go to state 11
    if                             shift and go to state 14
    print                          shift and go to state 15

state 86

    (26) string_list_interior -> string virgule string_list_interior .

    RPARENT         reduce using rule 26 (string_list_interior -> string virgule string_list_interior .)


state 87

    (18) expression -> for variable in variable do expression_list . endfor
    (55) endfor -> . ENDFOR

    ENDFOR          shift and go to state 90

    endfor                         shift and go to state 89

state 88

    (17) expression -> for variable in string_list do expression_list . endfor
    (55) endfor -> . ENDFOR

    ENDFOR          shift and go to state 90

    endfor                         shift and go to state 91

state 89

    (18) expression -> for variable in variable do expression_list endfor .

    END_EXPRESSION  reduce using rule 18 (expression -> for variable in variable do expression_list endfor .)


state 90

    (55) endfor -> ENDFOR .

    END_EXPRESSION  reduce using rule 55 (endfor -> ENDFOR .)


state 91

    (17) expression -> for variable in string_list do expression_list endfor .

    END_EXPRESSION  reduce using rule 17 (expression -> for variable in string_list do expression_list endfor .)

