
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPleftPOINTleftOP_LOGIQUEADD_OP ASSIGNATION BOOL COMPARATOR DO ENDFOR ENDIF END_BLOC END_EXPRESSION FOR IF IN INTEGER LPARENT MUL_OP OP_LOGIQUE POINT PRINT RPARENT START_BLOC STRING TEXT VARIABLE VIRGULEprogramme : text\n    | text programme\n    | dumboBloc \n    | dumboBloc programmedumboBloc : start_bloc expression_list end_bloc expression_list : expression end_expression\n                  | expression end_expression expression_listexpression : variable assignation string_expression\n         | variable assignation string_list\n         | variable assignation integer_expression\n         | variable assignation variable\n         | variable assignation boolean\n         | if boolean_expression do expression_list endif\n         | print string_expression\n         | print variable\n         | for variable in string_list do expression_list endfor\n         | for variable in variable do expression_list endforstring_expression : string\n        | string_expression POINT variable\n        | variable POINT string_expression\n        | variable POINT variable\n        | string_expression POINT string_expressionstring_list : lparent string_list_interior rparentstring_list_interior : string \n        | string virgule string_list_interiorinteger_expression : integer_expression ADD_OP integer_expression\n        | integer_expression MUL_OP integer_expression\n        | variable MUL_OP integer_expression\n        | integer_expression MUL_OP variable\n        | variable MUL_OP variable\n        | variable ADD_OP integer_expression\n        | integer_expression ADD_OP variable\n        | variable ADD_OP variable\n        | integercomparator_expression : integer_expression COMPARATOR integer_expressionboolean_expression : boolean_expression OP_LOGIQUE boolean_expression\n        | comparator_expression\n        | booleaninteger : INTEGERboolean : BOOLstring : STRINGif : IFendif : ENDIFvariable : VARIABLE text : TEXT print : PRINT start_bloc : START_BLOCend_bloc : END_BLOCend_expression : END_EXPRESSIONassignation : ASSIGNATIONfor : FORin : INdo : DOendfor : ENDFORlparent : LPARENTrparent : RPARENTvirgule : VIRGULE'
    
_lr_action_items = {'TEXT':([0,2,3,4,19,20,],[4,4,4,-45,-5,-48,]),'START_BLOC':([0,2,3,4,19,20,],[6,6,6,-45,-5,-48,]),'$end':([1,2,3,4,7,8,19,20,],[0,-1,-3,-45,-2,-4,-5,-48,]),'VARIABLE':([5,6,12,13,14,16,17,18,21,22,23,24,46,47,48,49,50,51,52,53,54,55,56,57,83,84,],[15,-47,15,15,15,-42,-46,-51,15,-49,15,-50,15,15,-53,15,15,15,15,15,15,15,15,-52,15,15,]),'IF':([5,6,21,22,46,48,83,84,],[16,-47,16,-49,16,-53,16,16,]),'PRINT':([5,6,21,22,46,48,83,84,],[17,-47,17,-49,17,-53,17,17,]),'FOR':([5,6,21,22,46,48,83,84,],[18,-47,18,-49,18,-53,18,18,]),'END_BLOC':([9,21,22,38,],[20,-6,-49,-7,]),'END_EXPRESSION':([10,15,29,31,32,33,34,35,36,39,40,41,42,43,63,64,65,66,67,68,69,70,71,72,73,74,77,78,81,82,88,89,90,],[22,-44,-40,-34,-39,-14,-15,-18,-41,-11,-8,-9,-10,-12,-26,-32,-27,-29,-30,-28,-33,-31,-22,-19,-21,-20,-23,-56,-13,-43,-17,-54,-16,]),'ASSIGNATION':([11,15,],[24,-44,]),'BOOL':([12,16,23,24,47,],[29,-42,29,-50,29,]),'INTEGER':([12,16,23,24,47,49,50,51,52,53,],[32,-42,32,-50,32,32,32,32,32,32,]),'STRING':([13,17,23,24,44,45,54,55,79,80,],[36,-46,36,-50,36,-55,36,36,36,-57,]),'MUL_OP':([15,28,30,31,32,39,42,62,63,64,65,66,67,68,69,70,],[-44,51,52,-34,-39,52,51,51,51,52,-27,-29,-30,-28,52,51,]),'ADD_OP':([15,28,30,31,32,39,42,62,63,64,65,66,67,68,69,70,],[-44,50,53,-34,-39,53,50,50,-26,-32,-27,-29,-30,-28,-33,-31,]),'POINT':([15,33,34,35,36,39,40,71,72,73,74,],[-44,54,55,-18,-41,55,54,-22,-19,-21,-20,]),'IN':([15,37,],[-44,57,]),'COMPARATOR':([15,28,31,32,63,64,65,66,67,68,69,70,],[-44,49,-34,-39,-26,-32,-27,-29,-30,-28,-33,-31,]),'OP_LOGIQUE':([15,25,26,27,29,31,32,61,62,63,64,65,66,67,68,69,70,],[-44,47,-37,-38,-40,-34,-39,-36,-35,-26,-32,-27,-29,-30,-28,-33,-31,]),'DO':([15,25,26,27,29,31,32,61,62,63,64,65,66,67,68,69,70,75,76,77,78,],[-44,48,-37,-38,-40,-34,-39,-36,-35,-26,-32,-27,-29,-30,-28,-33,-31,48,48,-23,-56,]),'ENDIF':([21,22,38,60,],[-6,-49,-7,82,]),'ENDFOR':([21,22,38,86,87,],[-6,-49,-7,89,89,]),'LPARENT':([23,24,56,57,],[45,-50,45,-52,]),'VIRGULE':([36,59,],[-41,80,]),'RPARENT':([36,58,59,85,],[-41,78,-24,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,3,],[1,7,8,]),'text':([0,2,3,],[2,2,2,]),'dumboBloc':([0,2,3,],[3,3,3,]),'start_bloc':([0,2,3,],[5,5,5,]),'expression_list':([5,21,46,83,84,],[9,38,60,86,87,]),'expression':([5,21,46,83,84,],[10,10,10,10,10,]),'variable':([5,12,13,14,21,23,46,47,49,50,51,52,53,54,55,56,83,84,],[11,30,34,37,11,39,11,30,30,64,66,67,69,72,73,75,11,11,]),'if':([5,21,46,83,84,],[12,12,12,12,12,]),'print':([5,21,46,83,84,],[13,13,13,13,13,]),'for':([5,21,46,83,84,],[14,14,14,14,14,]),'end_bloc':([9,],[19,]),'end_expression':([10,],[21,]),'assignation':([11,],[23,]),'boolean_expression':([12,47,],[25,61,]),'comparator_expression':([12,47,],[26,26,]),'boolean':([12,23,47,],[27,43,27,]),'integer_expression':([12,23,47,49,50,51,52,53,],[28,42,28,62,63,65,68,70,]),'integer':([12,23,47,49,50,51,52,53,],[31,31,31,31,31,31,31,31,]),'string_expression':([13,23,54,55,],[33,40,71,74,]),'string':([13,23,44,54,55,79,],[35,35,59,35,35,59,]),'string_list':([23,56,],[41,76,]),'lparent':([23,56,],[44,44,]),'do':([25,75,76,],[46,83,84,]),'in':([37,],[56,]),'string_list_interior':([44,79,],[58,85,]),'rparent':([58,],[77,]),'virgule':([59,],[79,]),'endif':([60,],[81,]),'endfor':([86,87,],[88,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> text','programme',1,'p_expression_programme','dumbo_syntaxique.py',24),
  ('programme -> text programme','programme',2,'p_expression_programme','dumbo_syntaxique.py',25),
  ('programme -> dumboBloc','programme',1,'p_expression_programme','dumbo_syntaxique.py',26),
  ('programme -> dumboBloc programme','programme',2,'p_expression_programme','dumbo_syntaxique.py',27),
  ('dumboBloc -> start_bloc expression_list end_bloc','dumboBloc',3,'p_expression_dumboBloc','dumbo_syntaxique.py',35),
  ('expression_list -> expression end_expression','expression_list',2,'p_expression_expression_list','dumbo_syntaxique.py',40),
  ('expression_list -> expression end_expression expression_list','expression_list',3,'p_expression_expression_list','dumbo_syntaxique.py',41),
  ('expression -> variable assignation string_expression','expression',3,'p_expression_expression','dumbo_syntaxique.py',49),
  ('expression -> variable assignation string_list','expression',3,'p_expression_expression','dumbo_syntaxique.py',50),
  ('expression -> variable assignation integer_expression','expression',3,'p_expression_expression','dumbo_syntaxique.py',51),
  ('expression -> variable assignation variable','expression',3,'p_expression_expression','dumbo_syntaxique.py',52),
  ('expression -> variable assignation boolean','expression',3,'p_expression_expression','dumbo_syntaxique.py',53),
  ('expression -> if boolean_expression do expression_list endif','expression',5,'p_expression_expression','dumbo_syntaxique.py',54),
  ('expression -> print string_expression','expression',2,'p_expression_expression','dumbo_syntaxique.py',55),
  ('expression -> print variable','expression',2,'p_expression_expression','dumbo_syntaxique.py',56),
  ('expression -> for variable in string_list do expression_list endfor','expression',7,'p_expression_expression','dumbo_syntaxique.py',57),
  ('expression -> for variable in variable do expression_list endfor','expression',7,'p_expression_expression','dumbo_syntaxique.py',58),
  ('string_expression -> string','string_expression',1,'p_expression_string_expression','dumbo_syntaxique.py',70),
  ('string_expression -> string_expression POINT variable','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',71),
  ('string_expression -> variable POINT string_expression','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',72),
  ('string_expression -> variable POINT variable','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',73),
  ('string_expression -> string_expression POINT string_expression','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',74),
  ('string_list -> lparent string_list_interior rparent','string_list',3,'p_expression_string_list','dumbo_syntaxique.py',82),
  ('string_list_interior -> string','string_list_interior',1,'p_expression_string_list_interior','dumbo_syntaxique.py',87),
  ('string_list_interior -> string virgule string_list_interior','string_list_interior',3,'p_expression_string_list_interior','dumbo_syntaxique.py',88),
  ('integer_expression -> integer_expression ADD_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',96),
  ('integer_expression -> integer_expression MUL_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',97),
  ('integer_expression -> variable MUL_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',98),
  ('integer_expression -> integer_expression MUL_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',99),
  ('integer_expression -> variable MUL_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',100),
  ('integer_expression -> variable ADD_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',101),
  ('integer_expression -> integer_expression ADD_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',102),
  ('integer_expression -> variable ADD_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',103),
  ('integer_expression -> integer','integer_expression',1,'p_expression_integer_expression','dumbo_syntaxique.py',104),
  ('comparator_expression -> integer_expression COMPARATOR integer_expression','comparator_expression',3,'p_expression_comparator_expression','dumbo_syntaxique.py',112),
  ('boolean_expression -> boolean_expression OP_LOGIQUE boolean_expression','boolean_expression',3,'p_expression_boolean_expression','dumbo_syntaxique.py',118),
  ('boolean_expression -> comparator_expression','boolean_expression',1,'p_expression_boolean_expression','dumbo_syntaxique.py',119),
  ('boolean_expression -> boolean','boolean_expression',1,'p_expression_boolean_expression','dumbo_syntaxique.py',120),
  ('integer -> INTEGER','integer',1,'p_expression_integer','dumbo_syntaxique.py',129),
  ('boolean -> BOOL','boolean',1,'p_expression_boolean','dumbo_syntaxique.py',134),
  ('string -> STRING','string',1,'p_expression_string','dumbo_syntaxique.py',139),
  ('if -> IF','if',1,'p_expression_if','dumbo_syntaxique.py',144),
  ('endif -> ENDIF','endif',1,'p_expression_endif','dumbo_syntaxique.py',149),
  ('variable -> VARIABLE','variable',1,'p_expression_variable','dumbo_syntaxique.py',154),
  ('text -> TEXT','text',1,'p_expression_txt','dumbo_syntaxique.py',159),
  ('print -> PRINT','print',1,'p_expression_print','dumbo_syntaxique.py',164),
  ('start_bloc -> START_BLOC','start_bloc',1,'p_expression_start_bloc','dumbo_syntaxique.py',169),
  ('end_bloc -> END_BLOC','end_bloc',1,'p_expression_end_bloc','dumbo_syntaxique.py',174),
  ('end_expression -> END_EXPRESSION','end_expression',1,'p_expression_end_expression','dumbo_syntaxique.py',179),
  ('assignation -> ASSIGNATION','assignation',1,'p_expression_assignation','dumbo_syntaxique.py',184),
  ('for -> FOR','for',1,'p_expression_for','dumbo_syntaxique.py',189),
  ('in -> IN','in',1,'p_expression_in','dumbo_syntaxique.py',194),
  ('do -> DO','do',1,'p_expression_do','dumbo_syntaxique.py',199),
  ('endfor -> ENDFOR','endfor',1,'p_expression_endfor','dumbo_syntaxique.py',204),
  ('lparent -> LPARENT','lparent',1,'p_expression_lparent','dumbo_syntaxique.py',209),
  ('rparent -> RPARENT','rparent',1,'p_expression_rparent','dumbo_syntaxique.py',214),
  ('virgule -> VIRGULE','virgule',1,'p_expression_virgule','dumbo_syntaxique.py',219),
]
