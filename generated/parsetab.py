
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPleftPOINTleftOP_LOGIQUEADD_OP ASSIGNATION BOOL COMPARATOR DO ENDFOR ENDIF END_BLOC END_EXPRESSION FOR IF IN INTEGER LPARENT MUL_OP OP_LOGIQUE POINT PRINT RPARENT START_BLOC STRING TEXT VARIABLE VIRGULEprogramme : text\n    | text programme\n    | dumboBloc \n    | dumboBloc programmedumboBloc : start_bloc expression_list end_bloc\n        | start_bloc end_bloc expression_list : expression end_expression\n                  | expression end_expression expression_listexpression : variable assignation string_expression\n         | variable assignation string_list\n         | variable assignation integer_expression\n         | variable assignation variable\n         | variable assignation boolean\n         | if boolean_expression do expression_list endif\n         | print string_expression\n         | print variable\n         | for variable in string_list do expression_list endfor\n         | for variable in variable do expression_list endforstring_expression : string\n        | string_expression POINT variable\n        | variable POINT string_expression\n        | variable POINT variable\n        | string_expression POINT string_expressionstring_list : lparent string_list_interior rparentstring_list_interior : string \n        | string virgule string_list_interiorinteger_expression : integer_expression ADD_OP integer_expression\n        | integer_expression MUL_OP integer_expression\n        | variable MUL_OP integer_expression\n        | integer_expression MUL_OP variable\n        | variable MUL_OP variable\n        | variable ADD_OP integer_expression\n        | integer_expression ADD_OP variable\n        | variable ADD_OP variable\n        | integercomparator_expression : integer_expression COMPARATOR integer_expressionboolean_expression : boolean_expression OP_LOGIQUE boolean_expression\n        | comparator_expression\n        | booleaninteger : INTEGERboolean : BOOLstring : STRINGif : IFendif : ENDIFvariable : VARIABLE text : TEXT print : PRINT start_bloc : START_BLOCend_bloc : END_BLOCend_expression : END_EXPRESSIONassignation : ASSIGNATIONfor : FORin : INdo : DOendfor : ENDFORlparent : LPARENTrparent : RPARENTvirgule : VIRGULE'
    
_lr_action_items = {'TEXT':([0,2,3,4,10,12,21,],[4,4,4,-46,-6,-49,-5,]),'START_BLOC':([0,2,3,4,10,12,21,],[6,6,6,-46,-6,-49,-5,]),'$end':([1,2,3,4,7,8,10,12,21,],[0,-1,-3,-46,-2,-4,-6,-49,-5,]),'END_BLOC':([5,6,9,22,23,39,],[12,-48,12,-7,-50,-8,]),'VARIABLE':([5,6,14,15,16,18,19,20,22,23,24,25,47,48,49,50,51,52,53,54,55,56,57,58,84,85,],[17,-48,17,17,17,-43,-47,-52,17,-50,17,-51,17,17,-54,17,17,17,17,17,17,17,17,-53,17,17,]),'IF':([5,6,22,23,47,49,84,85,],[18,-48,18,-50,18,-54,18,18,]),'PRINT':([5,6,22,23,47,49,84,85,],[19,-48,19,-50,19,-54,19,19,]),'FOR':([5,6,22,23,47,49,84,85,],[20,-48,20,-50,20,-54,20,20,]),'END_EXPRESSION':([11,17,30,32,33,34,35,36,37,40,41,42,43,44,64,65,66,67,68,69,70,71,72,73,74,75,78,79,82,83,89,90,91,],[23,-45,-41,-35,-40,-15,-16,-19,-42,-12,-9,-10,-11,-13,-27,-33,-28,-30,-31,-29,-34,-32,-23,-20,-22,-21,-24,-57,-14,-44,-18,-55,-17,]),'ASSIGNATION':([13,17,],[25,-45,]),'BOOL':([14,18,24,25,48,],[30,-43,30,-51,30,]),'INTEGER':([14,18,24,25,48,50,51,52,53,54,],[33,-43,33,-51,33,33,33,33,33,33,]),'STRING':([15,19,24,25,45,46,55,56,80,81,],[37,-47,37,-51,37,-56,37,37,37,-58,]),'MUL_OP':([17,29,31,32,33,40,43,63,64,65,66,67,68,69,70,71,],[-45,52,53,-35,-40,53,52,52,52,53,-28,-30,-31,-29,53,52,]),'ADD_OP':([17,29,31,32,33,40,43,63,64,65,66,67,68,69,70,71,],[-45,51,54,-35,-40,54,51,51,-27,-33,-28,-30,-31,-29,-34,-32,]),'POINT':([17,34,35,36,37,40,41,72,73,74,75,],[-45,55,56,-19,-42,56,55,-23,-20,-22,-21,]),'IN':([17,38,],[-45,58,]),'COMPARATOR':([17,29,32,33,64,65,66,67,68,69,70,71,],[-45,50,-35,-40,-27,-33,-28,-30,-31,-29,-34,-32,]),'OP_LOGIQUE':([17,26,27,28,30,32,33,62,63,64,65,66,67,68,69,70,71,],[-45,48,-38,-39,-41,-35,-40,-37,-36,-27,-33,-28,-30,-31,-29,-34,-32,]),'DO':([17,26,27,28,30,32,33,62,63,64,65,66,67,68,69,70,71,76,77,78,79,],[-45,49,-38,-39,-41,-35,-40,-37,-36,-27,-33,-28,-30,-31,-29,-34,-32,49,49,-24,-57,]),'ENDIF':([22,23,39,61,],[-7,-50,-8,83,]),'ENDFOR':([22,23,39,87,88,],[-7,-50,-8,90,90,]),'LPARENT':([24,25,57,58,],[46,-51,46,-53,]),'VIRGULE':([37,60,],[-42,81,]),'RPARENT':([37,59,60,86,],[-42,79,-25,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,3,],[1,7,8,]),'text':([0,2,3,],[2,2,2,]),'dumboBloc':([0,2,3,],[3,3,3,]),'start_bloc':([0,2,3,],[5,5,5,]),'expression_list':([5,22,47,84,85,],[9,39,61,87,88,]),'end_bloc':([5,9,],[10,21,]),'expression':([5,22,47,84,85,],[11,11,11,11,11,]),'variable':([5,14,15,16,22,24,47,48,50,51,52,53,54,55,56,57,84,85,],[13,31,35,38,13,40,13,31,31,65,67,68,70,73,74,76,13,13,]),'if':([5,22,47,84,85,],[14,14,14,14,14,]),'print':([5,22,47,84,85,],[15,15,15,15,15,]),'for':([5,22,47,84,85,],[16,16,16,16,16,]),'end_expression':([11,],[22,]),'assignation':([13,],[24,]),'boolean_expression':([14,48,],[26,62,]),'comparator_expression':([14,48,],[27,27,]),'boolean':([14,24,48,],[28,44,28,]),'integer_expression':([14,24,48,50,51,52,53,54,],[29,43,29,63,64,66,69,71,]),'integer':([14,24,48,50,51,52,53,54,],[32,32,32,32,32,32,32,32,]),'string_expression':([15,24,55,56,],[34,41,72,75,]),'string':([15,24,45,55,56,80,],[36,36,60,36,36,60,]),'string_list':([24,57,],[42,77,]),'lparent':([24,57,],[45,45,]),'do':([26,76,77,],[47,84,85,]),'in':([38,],[57,]),'string_list_interior':([45,80,],[59,86,]),'rparent':([59,],[78,]),'virgule':([60,],[80,]),'endif':([61,],[82,]),'endfor':([87,88,],[89,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> text','programme',1,'p_expression_programme','dumbo_syntaxique.py',27),
  ('programme -> text programme','programme',2,'p_expression_programme','dumbo_syntaxique.py',28),
  ('programme -> dumboBloc','programme',1,'p_expression_programme','dumbo_syntaxique.py',29),
  ('programme -> dumboBloc programme','programme',2,'p_expression_programme','dumbo_syntaxique.py',30),
  ('dumboBloc -> start_bloc expression_list end_bloc','dumboBloc',3,'p_expression_dumboBloc','dumbo_syntaxique.py',38),
  ('dumboBloc -> start_bloc end_bloc','dumboBloc',2,'p_expression_dumboBloc','dumbo_syntaxique.py',39),
  ('expression_list -> expression end_expression','expression_list',2,'p_expression_expression_list','dumbo_syntaxique.py',47),
  ('expression_list -> expression end_expression expression_list','expression_list',3,'p_expression_expression_list','dumbo_syntaxique.py',48),
  ('expression -> variable assignation string_expression','expression',3,'p_expression_expression','dumbo_syntaxique.py',56),
  ('expression -> variable assignation string_list','expression',3,'p_expression_expression','dumbo_syntaxique.py',57),
  ('expression -> variable assignation integer_expression','expression',3,'p_expression_expression','dumbo_syntaxique.py',58),
  ('expression -> variable assignation variable','expression',3,'p_expression_expression','dumbo_syntaxique.py',59),
  ('expression -> variable assignation boolean','expression',3,'p_expression_expression','dumbo_syntaxique.py',60),
  ('expression -> if boolean_expression do expression_list endif','expression',5,'p_expression_expression','dumbo_syntaxique.py',61),
  ('expression -> print string_expression','expression',2,'p_expression_expression','dumbo_syntaxique.py',62),
  ('expression -> print variable','expression',2,'p_expression_expression','dumbo_syntaxique.py',63),
  ('expression -> for variable in string_list do expression_list endfor','expression',7,'p_expression_expression','dumbo_syntaxique.py',64),
  ('expression -> for variable in variable do expression_list endfor','expression',7,'p_expression_expression','dumbo_syntaxique.py',65),
  ('string_expression -> string','string_expression',1,'p_expression_string_expression','dumbo_syntaxique.py',77),
  ('string_expression -> string_expression POINT variable','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',78),
  ('string_expression -> variable POINT string_expression','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',79),
  ('string_expression -> variable POINT variable','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',80),
  ('string_expression -> string_expression POINT string_expression','string_expression',3,'p_expression_string_expression','dumbo_syntaxique.py',81),
  ('string_list -> lparent string_list_interior rparent','string_list',3,'p_expression_string_list','dumbo_syntaxique.py',89),
  ('string_list_interior -> string','string_list_interior',1,'p_expression_string_list_interior','dumbo_syntaxique.py',94),
  ('string_list_interior -> string virgule string_list_interior','string_list_interior',3,'p_expression_string_list_interior','dumbo_syntaxique.py',95),
  ('integer_expression -> integer_expression ADD_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',103),
  ('integer_expression -> integer_expression MUL_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',104),
  ('integer_expression -> variable MUL_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',105),
  ('integer_expression -> integer_expression MUL_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',106),
  ('integer_expression -> variable MUL_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',107),
  ('integer_expression -> variable ADD_OP integer_expression','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',108),
  ('integer_expression -> integer_expression ADD_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',109),
  ('integer_expression -> variable ADD_OP variable','integer_expression',3,'p_expression_integer_expression','dumbo_syntaxique.py',110),
  ('integer_expression -> integer','integer_expression',1,'p_expression_integer_expression','dumbo_syntaxique.py',111),
  ('comparator_expression -> integer_expression COMPARATOR integer_expression','comparator_expression',3,'p_expression_comparator_expression','dumbo_syntaxique.py',121),
  ('boolean_expression -> boolean_expression OP_LOGIQUE boolean_expression','boolean_expression',3,'p_expression_boolean_expression','dumbo_syntaxique.py',127),
  ('boolean_expression -> comparator_expression','boolean_expression',1,'p_expression_boolean_expression','dumbo_syntaxique.py',128),
  ('boolean_expression -> boolean','boolean_expression',1,'p_expression_boolean_expression','dumbo_syntaxique.py',129),
  ('integer -> INTEGER','integer',1,'p_expression_integer','dumbo_syntaxique.py',138),
  ('boolean -> BOOL','boolean',1,'p_expression_boolean','dumbo_syntaxique.py',143),
  ('string -> STRING','string',1,'p_expression_string','dumbo_syntaxique.py',148),
  ('if -> IF','if',1,'p_expression_if','dumbo_syntaxique.py',153),
  ('endif -> ENDIF','endif',1,'p_expression_endif','dumbo_syntaxique.py',158),
  ('variable -> VARIABLE','variable',1,'p_expression_variable','dumbo_syntaxique.py',163),
  ('text -> TEXT','text',1,'p_expression_txt','dumbo_syntaxique.py',168),
  ('print -> PRINT','print',1,'p_expression_print','dumbo_syntaxique.py',173),
  ('start_bloc -> START_BLOC','start_bloc',1,'p_expression_start_bloc','dumbo_syntaxique.py',178),
  ('end_bloc -> END_BLOC','end_bloc',1,'p_expression_end_bloc','dumbo_syntaxique.py',183),
  ('end_expression -> END_EXPRESSION','end_expression',1,'p_expression_end_expression','dumbo_syntaxique.py',188),
  ('assignation -> ASSIGNATION','assignation',1,'p_expression_assignation','dumbo_syntaxique.py',193),
  ('for -> FOR','for',1,'p_expression_for','dumbo_syntaxique.py',198),
  ('in -> IN','in',1,'p_expression_in','dumbo_syntaxique.py',203),
  ('do -> DO','do',1,'p_expression_do','dumbo_syntaxique.py',208),
  ('endfor -> ENDFOR','endfor',1,'p_expression_endfor','dumbo_syntaxique.py',213),
  ('lparent -> LPARENT','lparent',1,'p_expression_lparent','dumbo_syntaxique.py',218),
  ('rparent -> RPARENT','rparent',1,'p_expression_rparent','dumbo_syntaxique.py',223),
  ('virgule -> VIRGULE','virgule',1,'p_expression_virgule','dumbo_syntaxique.py',228),
]
